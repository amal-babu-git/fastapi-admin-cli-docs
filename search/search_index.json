{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI Admin CLI","text":"<p>A Django-inspired CLI tool for managing FastAPI applications with a modular structure and best practices.</p> <ul> <li>\ud83d\ude80 Project scaffolding with batteries included</li> <li>\ud83d\udce6 Modular app structure like Django</li> <li>\ud83d\udc33 Built-in Docker integration</li> <li>\ud83d\udd04 Database migrations with Alembic </li> <li>\ud83d\udd10 Authentication with FastAPI-Users</li> <li>\ud83d\udc64 Admin panel with SQLAdmin</li> </ul>"},{"location":"#quick-install","title":"Quick Install","text":"<pre><code>pip install fastapi-admin-cli\n</code></pre>"},{"location":"#available-commands","title":"Available Commands","text":"Command Description <code>startproject</code> Create a new FastAPI project <code>startapp</code> Create a new app within the project <code>docker build</code> Build Docker containers <code>docker run</code> Run Docker containers <code>docker down</code> Stop and remove containers <code>docker cmd \"command\"</code> Run custom docker-compose commands <code>db makemigrations</code> Create database migrations <code>db migrate</code> Apply migrations (using alembic) <code>db shell</code> Open API container shell <code>createsuperuser</code> Create admin user <code>shell</code> Launch container shell"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Create a new project:    <pre><code>fastapi-admin startproject myproject\ncd myproject\n</code></pre></p> </li> <li> <p>Set up environment:    <pre><code>cp env.txt .env\n</code></pre></p> </li> <li> <p>Launch with Docker:    <pre><code>fastapi-admin docker build\nfastapi-admin docker run\n</code></pre></p> </li> <li> <p>Create migrations:    <pre><code>fastapi-admin db makemigrations\nfastapi-admin db migrate \n</code></pre></p> </li> <li> <p>Create admin user:    <pre><code>fastapi-admin createsuperuser admin@example.com password123\n</code></pre></p> </li> </ol> <p>See the Quick Start Guide for more details.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation</li> <li>Start Project </li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License - see LICENSE</p>"},{"location":"about-me/about-me/","title":"About Me","text":"<p>Hi, I am Amal Babu.</p> <p>In most of my projects, I've relied heavily on Django\u2014especially with Django REST Framework for APIs, paired with React or Next.js on the frontend.</p> <p>For years, I'd been hearing great things about FastAPI. Its modern, Pythonic syntax, built-in async support, and strong performance really caught my attention. I finally gave it a shot recently\u2014and I absolutely loved it.</p> <p>That said, I missed Django's modular structure and the developer-friendly manage.py commands. So, I built a Django-style setup in FastAPI using SQLAdmin for the admin panel, Alembic for database migrations, and FastAPI-Users for authentication.</p> <p>While this structure worked well, repeating the same setup for every new project started to feel tedious. To solve this personal pain point, I created fastapi-admin-cli\u2014a simple CLI tool that brings Django-like commands to FastAPI. It supports startproject (with built-in auth and admin panel) and startapp, helping me spin up new projects much faster.</p> <p>I decided to publish it on PyPI, hoping it might help others like me who love structure and speed in their FastAPI projects.</p> <p>amal-babu-git</p> <p>For any inquiries, feel free to reach out at developer.amalbabu@gmail.com</p>"},{"location":"development/contributing/","title":"Contributing to FastAPI Admin CLI","text":"<p>First off, thank you for considering contributing to FastAPI Admin CLI! It's people like you that make this tool better for everyone. This document provides guidelines and instructions for contributing to this project.</p>"},{"location":"development/contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Project Structure</li> <li>Development Setup</li> <li>Development Workflow</li> <li>Adding New Commands</li> <li>Testing</li> <li>Documentation</li> <li>Pull Request Process</li> <li>Style Guidelines</li> <li>Documentation Guidelines</li> </ul>"},{"location":"development/contributing/#introduction","title":"Introduction","text":"<p>FastAPI Admin CLI is a Django-inspired command-line tool for managing FastAPI applications with a modular structure. It helps developers quickly scaffold and manage FastAPI projects with a clean, organized architecture.</p> <p>The project aims to simplify common tasks in FastAPI development, such as:</p> <ul> <li>Creating new projects with a well-structured template</li> <li>Adding modular apps within a project</li> <li>Managing Docker containers</li> <li>Handling database migrations</li> <li>Providing easy access to shell and admin operations</li> </ul>"},{"location":"development/contributing/#project-structure","title":"Project Structure","text":"<p>Here's an overview of the project's structure:</p> <pre><code>fastapi-admin-cli/\n\u251c\u2500\u2500 fastapi_admin/              # Main package directory\n\u2502   \u251c\u2500\u2500 __init__.py             # Package initialization with version\n\u2502   \u251c\u2500\u2500 cli.py                  # Main CLI entry point\n\u2502   \u251c\u2500\u2500 commands/               # CLI commands implementation\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py         # Package initialization\n\u2502   \u2502   \u251c\u2500\u2500 app.py              # App creation command\n\u2502   \u2502   \u251c\u2500\u2500 container.py        # Container shell access\n\u2502   \u2502   \u251c\u2500\u2500 docker.py           # Docker management commands\n\u2502   \u2502   \u251c\u2500\u2500 migrations.py       # Database migration commands\n\u2502   \u2502   \u251c\u2500\u2500 project.py          # Project creation command\n\u2502   \u2502   \u2514\u2500\u2500 superuser.py        # Superuser management\n\u2502   \u2514\u2500\u2500 utils/                  # Utility functions\n\u2502       \u251c\u2500\u2500 __init__.py         # Package initialization\n\u2502       \u251c\u2500\u2500 docker_utils.py     # Docker-related utilities\n\u2502       \u251c\u2500\u2500 file_utils.py       # File operation utilities\n\u2502       \u2514\u2500\u2500 template_utils.py   # Template handling utilities\n\u251c\u2500\u2500 pyproject.toml              # Project metadata and dependencies\n\u251c\u2500\u2500 README.md                   # Project documentation\n\u251c\u2500\u2500 record_demo.sh              # Demo recording script\n\u2514\u2500\u2500 test_commands.sh            # Test script for CLI commands\n</code></pre>"},{"location":"development/contributing/#key-components","title":"Key Components:","text":"<ol> <li> <p>cli.py: The main entry point for the CLI tool. It registers all the command groups.</p> </li> <li> <p>commands/: Each file in this directory implements a specific command group:</p> </li> <li> <p><code>project.py</code>: Creates new FastAPI projects</p> </li> <li><code>app.py</code>: Creates new apps within a project</li> <li><code>docker.py</code>: Manages Docker containers</li> <li><code>migrations.py</code>: Handles database migrations</li> <li><code>container.py</code>: Provides shell access to containers</li> <li> <p><code>superuser.py</code>: Manages superuser creation</p> </li> <li> <p>utils/: Contains utility functions used across the project:</p> </li> <li> <p><code>template_utils.py</code>: Handles fetching and processing templates</p> </li> <li><code>file_utils.py</code>: Provides file system operations</li> <li><code>docker_utils.py</code>: Contains Docker-related utilities</li> </ol>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":""},{"location":"development/contributing/#fork-and-clone-the-repository","title":"Fork and Clone the Repository","text":"<ol> <li> <p>Fork the repository on GitHub</p> </li> <li> <p>Clone your fork locally:</p> </li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/fastapi-admin-cli.git\ncd fastapi-admin-cli\n</code></pre> <ol> <li>Add the original repository as upstream:</li> </ol> <pre><code>git remote add upstream https://github.com/amal-babu-git/fastapi-admin-cli.git\n</code></pre>"},{"location":"development/contributing/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li>Create a virtual environment:</li> </ol> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre> <ol> <li>Install the package in development mode:</li> </ol> <pre><code>pip install -e .\n</code></pre> <ol> <li>Install additional development dependencies:</li> </ol> <pre><code>pip install pytest black isort mypy\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a branch for your feature or bugfix:</li> </ol> <pre><code>git checkout -b feature-or-fix-name\n</code></pre> <ol> <li>Make your changes and commit them:</li> </ol> <pre><code>git add .\ngit commit -m \"Description of your changes\"\n</code></pre> <ol> <li>Keep your branch updated with the upstream:</li> </ol> <pre><code>git fetch upstream\ngit rebase upstream/main\n</code></pre> <ol> <li>Push your changes to your fork:</li> </ol> <pre><code>git push origin feature-or-fix-name\n</code></pre> <ol> <li>Open a pull request on GitHub</li> </ol>"},{"location":"development/contributing/#adding-new-commands","title":"Adding New Commands","text":"<p>To add a new command to the CLI:</p> <ol> <li> <p>Create a new file in the <code>fastapi_admin/commands/</code> directory, e.g., <code>mycommand.py</code>.</p> </li> <li> <p>Implement your command using <code>typer</code> (see existing commands for examples).</p> </li> <li> <p>Register your command in <code>cli.py</code> by adding:</p> </li> </ol> <pre><code>from fastapi_admin.commands import mycommand\ncli_app.add_typer(mycommand.app, name=\"mycommand\")\n</code></pre> <p>Example command structure:</p> <pre><code>import typer\nfrom rich.console import Console\nfrom rich.panel import Panel\n\napp = typer.Typer(help=\"My new command description\")\nconsole = Console()\n\n@app.callback(invoke_without_command=True)\ndef main(param: str):\n    \"\"\"Main command implementation\"\"\"\n    console.print(Panel(f\"Executing command with {param}\"))\n    # Command implementation here\n</code></pre>"},{"location":"development/contributing/#testing","title":"Testing","text":"<p>You can test your changes using the <code>test_commands.sh</code> script:</p> <pre><code>./test_commands.sh\n</code></pre> <p>If you're adding new commands or features, consider adding tests for them to this script.</p> <p>For interactive testing, use:</p> <pre><code>fastapi-admin your-command --your-parameters\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>When adding new features, please update the documentation:</p> <ol> <li> <p>Add your command to the command table in README.md</p> </li> <li> <p>Document your command's usage with examples</p> </li> <li> <p>If your command adds significant functionality, consider adding a section to README.md</p> </li> </ol>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Ensure your code passes all tests and linting checks</p> </li> <li> <p>Update the documentation if needed</p> </li> <li> <p>Make sure your PR title and description clearly describe the changes</p> </li> <li> <p>Link any related issues in your PR description</p> </li> <li> <p>Be responsive to feedback and be willing to make requested changes</p> </li> </ol>"},{"location":"development/contributing/#style-guidelines","title":"Style Guidelines","text":"<p>This project follows these style guidelines:</p> <ol> <li> <p>Use Black for code formatting</p> </li> <li> <p>Use isort for import sorting</p> </li> <li> <p>Follow PEP 8 style guidelines</p> </li> <li> <p>Write clear docstrings for functions and classes</p> </li> <li> <p>Use type hints where appropriate</p> </li> </ol> <p>Before submitting a PR, format your code:</p> <pre><code>black fastapi_admin\nisort fastapi_admin\n</code></pre>"},{"location":"development/contributing/#documentation-guidelines","title":"Documentation Guidelines","text":"<p>This project uses MkDocs with the Material theme for documentation. When contributing to documentation:</p>"},{"location":"development/contributing/#setting-up-documentation-environment","title":"Setting Up Documentation Environment","text":"<ol> <li>Navigate to the documentation directory:</li> </ol> <pre><code>cd fastapi-admin-cli-docs\n</code></pre> <ol> <li>Install MkDocs and required plugins:</li> </ol> <pre><code>pip install mkdocs mkdocs-material pymdown-extensions\n</code></pre>"},{"location":"development/contributing/#testing-documentation-changes","title":"Testing Documentation Changes","text":"<ol> <li>Run the MkDocs development server:</li> </ol> <pre><code>mkdocs serve\n</code></pre> <ol> <li>Open your browser and navigate to <code>http://127.0.0.1:8000/</code> to preview changes</li> </ol>"},{"location":"development/contributing/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is organized as follows:</p> <ul> <li><code>docs/index.md</code>: Main landing page</li> <li><code>docs/getting-started/</code>: Installation and quick start guides</li> <li><code>docs/reference/</code>: Command reference and detailed usage instructions</li> <li><code>docs/development/</code>: Contribution and development guidelines</li> </ul>"},{"location":"development/contributing/#writing-documentation","title":"Writing Documentation","text":"<ol> <li> <p>Use Markdown for all documentation files</p> </li> <li> <p>Follow a clear and consistent style throughout documentation</p> </li> <li> <p>Include code examples where appropriate</p> </li> <li> <p>Organize content with clear headers and subheaders</p> </li> <li> <p>Use admonitions for notes, warnings, and tips:</p> </li> </ol> <pre><code>!!! note\n    This is an important note about this feature.\n</code></pre> <ol> <li> <p>When adding a new command or feature, be sure to:</p> </li> <li> <p>Add it to the appropriate reference page</p> </li> <li>Include examples of usage</li> <li>Document all options and arguments</li> <li>Consider adding it to the navigation in <code>mkdocs.yml</code></li> </ol>"},{"location":"development/contributing/#building-documentation-for-production","title":"Building Documentation for Production","text":"<p>To build the documentation for production:</p> <pre><code>mkdocs build\n</code></pre> <p>This will generate the static site in the <code>site/</code> directory.</p> <p>Thank you for contributing to FastAPI Admin CLI! Your efforts help make this tool better for everyone.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing FastAPI Admin CLI, ensure you have:</p> <ul> <li>Python 3.13 or higher</li> <li>pip (Python package installer)</li> <li>Docker and docker-compose</li> <li>Git</li> <li>uv (optional, python package manager)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<pre><code>pip install fastapi-admin-cli\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<pre><code>git clone https://github.com/amal-babu-git/fastapi-admin-cli.git\ncd fastapi-admin-cli\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#environment-setup","title":"Environment Setup","text":""},{"location":"getting-started/installation/#virtual-environment-recommended","title":"Virtual Environment (Recommended)","text":"<p>We recommend using a virtual environment. You can choose either method:</p>"},{"location":"getting-started/installation/#using-uv-recommended","title":"Using uv (Recommended)","text":"<pre><code># Create and setup project\nfastapi-admin startproject myproject\ncd myproject\nuv sync\n\n# Create and activate virtual environment\n# On Windows:\n.venv\\Scripts\\activate\n\n# On Unix or MacOS:\nsource .venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#using-pythons-venv","title":"Using Python's venv","text":"<pre><code># Create and setup project\nfastapi-admin startproject myproject\ncd myproject\n\n# Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# On Windows:\nvenv\\Scripts\\activate\n# On Unix or MacOS:\nsource venv/bin/activate\n\n# Install dependencies\npip install -e .\n</code></pre> <p>After activating the virtual environment, your project is ready for development.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, you can:</p> <ol> <li>Create your first project: <code>fastapi-admin startproject myproject</code></li> <li>Review the Quick Start Guide</li> <li>Explore the Command Reference</li> </ol>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you create your first FastAPI Admin project.</p>"},{"location":"getting-started/quickstart/#create-a-project","title":"Create a Project","text":"<ol> <li> <p>Install FastAPI Admin CLI:    <pre><code>pip install fastapi-admin-cli\n</code></pre></p> </li> <li> <p>Create a new project:    <pre><code>fastapi-admin startproject myproject\ncd myproject\n</code></pre></p> </li> </ol>"},{"location":"getting-started/quickstart/#setup-environment","title":"Setup Environment","text":"<ol> <li> <p>Copy environment template:    <pre><code>cp env.txt .env\n</code></pre></p> </li> <li> <p>Configure variables in .env:    <pre><code># API Settings\nAPI_TITLE=My API\nAPI_VERSION=0.1.0\n\n# Database Settings\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres\nPOSTGRES_DB=app_db\n</code></pre></p> </li> </ol>"},{"location":"getting-started/quickstart/#launch-with-docker","title":"Launch with Docker","text":"<ol> <li> <p>Build containers:    <pre><code>fastapi-admin docker build\n</code></pre></p> </li> <li> <p>Start services:    <pre><code>fastapi-admin docker run\n</code></pre></p> </li> </ol>"},{"location":"getting-started/quickstart/#database-setup","title":"Database Setup","text":"<ol> <li> <p>Create migrations:    <pre><code>fastapi-admin db makemigrations -m \"initial\"\n</code></pre></p> </li> <li> <p>Apply migrations:    <pre><code>fastapi-admin db migrate\n</code></pre></p> <p>\u2139\ufe0f INFO For other db management commands use alembic directly in container shell. <pre><code>fastapi-admin shell\n</code></pre> Then inside the shell execute alembic commands. Example:  <code>alembic upgrade head</code> </p> </li> </ol>"},{"location":"getting-started/quickstart/#create-admin-user","title":"Create Admin User","text":"<p>Create superuser for admin access:</p> <pre><code>fastapi-admin createsuperuser admin@example.com password123\n</code></pre>"},{"location":"getting-started/quickstart/#access-your-application","title":"Access Your Application","text":"<ul> <li>API Documentation: http://localhost:8000/docs</li> <li>Admin Interface: http://localhost:8000/admin</li> <li>API Root: http://localhost:8000/api/v1</li> </ul>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ol> <li> <p>Create your first app:    <pre><code>fastapi-admin startapp blog\n</code></pre></p> </li> <li> <p>Add routes to  app/core/main_routes.py :    <pre><code>from app.blog.routes import router as blog_router\napp.include_router(blog_router, prefix=\"/api/v1/blog\", tags=[\"blogs\"])\n</code></pre></p> </li> <li> <p>Create models in app/blog/models.py</p> </li> <li>Make and apply migrations</li> <li>Implement your business logic</li> </ol>"},{"location":"getting-started/quickstart/#development-workflow","title":"Development Workflow","text":"<ol> <li>Make model changes</li> <li> <p>Create migrations:    <pre><code>fastapi-admin db makemigrations\n</code></pre></p> </li> <li> <p>Apply migrations:    <pre><code>fastapi-admin db migrate\n</code></pre></p> </li> <li> <p>Access shell if needed:    <pre><code>fastapi-admin shell\n</code></pre></p> </li> </ol> <p>See the Command Reference for more details.</p>"},{"location":"reference/cli-commands/","title":"Command Reference","text":"<p>Detailed documentation for all FastAPI Admin CLI commands.</p>"},{"location":"reference/cli-commands/#project-commands","title":"Project Commands","text":""},{"location":"reference/cli-commands/#startproject","title":"<code>startproject</code>","text":"<p>Create a new FastAPI project with a complete project structure.</p> <pre><code>fastapi-admin startproject myproject\n</code></pre> <p>Options: None</p> <p>Creates project structure with: - Docker configuration - Database migrations - Authentication - Admin panel - Environment configs</p>"},{"location":"reference/cli-commands/#startapp","title":"<code>startapp</code>","text":"<p>Generate a new application module within your project.</p> <pre><code>fastapi-admin startapp users\n</code></pre> <p>Options: None</p> <p>Creates app with: - models.py - Database models - schemas.py - Pydantic schemas - routes.py - API endpoints - services.py - Business logic - admin.py - Admin interface</p>"},{"location":"reference/cli-commands/#docker-commands","title":"Docker Commands","text":""},{"location":"reference/cli-commands/#docker-build","title":"<code>docker build</code>","text":"<p>Build Docker containers for the project.</p> <pre><code>fastapi-admin docker build\n</code></pre> <p>Options: None</p> <p>Actions: - Copies env.txt to .env if needed - Builds API container - Builds PostgreSQL container</p>"},{"location":"reference/cli-commands/#docker-run","title":"<code>docker run</code>","text":"<p>Start the Docker containers.</p> <pre><code>fastapi-admin docker run\n</code></pre> <p>Options: None</p> <p>Actions: - Starts API container - Starts PostgreSQL container - Sets up networking</p>"},{"location":"reference/cli-commands/#docker-down","title":"<code>docker down</code>","text":"<p>Stop and remove containers.</p> <pre><code>fastapi-admin docker down [--volumes/-v]\n</code></pre> <p>Options: - <code>--volumes/-v</code> - Also remove volumes</p>"},{"location":"reference/cli-commands/#docker-cmd","title":"<code>docker cmd</code>","text":"<p>Run any Docker Compose command.</p> <pre><code>fastapi-admin docker cmd \"ps\"\n</code></pre> <p>Arguments: - command: Docker Compose command to run</p>"},{"location":"reference/cli-commands/#database-commands","title":"Database Commands","text":""},{"location":"reference/cli-commands/#db-makemigrations","title":"<code>db makemigrations</code>","text":"<p>Create new database migrations.</p> <pre><code>fastapi-admin db makemigrations -m \"message\"\n</code></pre> <p>Options: - <code>-m/--message</code> - Migration description</p> <p>Actions: - Detects model changes - Creates migration files - Stores in versions/</p>"},{"location":"reference/cli-commands/#db-migrate","title":"<code>db migrate</code>","text":"<p>Apply database migrations.</p> <pre><code>fastapi-admin db migrate\n</code></pre> <p>Options: None</p> <p>Actions: - Runs pending migrations - Updates database schema</p>"},{"location":"reference/cli-commands/#db-shell","title":"<code>db shell</code>","text":"<p>Open shell in API container.</p> <pre><code>fastapi-admin db shell\n</code></pre> <p>Provides access to: - Python shell - Database - Project environment</p>"},{"location":"reference/cli-commands/#development-commands","title":"Development Commands","text":""},{"location":"reference/cli-commands/#shell","title":"<code>shell</code>","text":"<p>Launch shell in a container.</p> <pre><code>fastapi-admin shell [--container-name NAME]\n</code></pre> <p>Options: - <code>--container-name</code> - Target container (default: fastapi-app)</p>"},{"location":"reference/cli-commands/#createsuperuser","title":"<code>createsuperuser</code>","text":"<p>Create admin user account.</p> <pre><code>fastapi-admin createsuperuser &lt;email&gt; &lt;password&gt; [--first-name NAME] [--last-name NAME]\n</code></pre> <p>Arguments: - email: Admin email - password: Admin password</p> <p>Options: - <code>--first-name</code> - First name - <code>--last-name</code> - Last name</p> <p>Creates superuser with: - Admin panel access - Full permissions</p>"},{"location":"reference/createsuperuser/","title":"Createsuperuser Command","text":"<p>The <code>createsuperuser</code> command creates an admin user account with full permissions for accessing the admin panel.</p>"},{"location":"reference/createsuperuser/#basic-usage","title":"Basic Usage","text":"<pre><code>fastapi-admin createsuperuser admin@example.com password123\n</code></pre> <p>This will create a new superuser with the given email and password.</p>"},{"location":"reference/createsuperuser/#arguments","title":"Arguments","text":"Argument Description Required email Email address for the superuser Yes password Password for the superuser Yes"},{"location":"reference/createsuperuser/#options","title":"Options","text":"Option Description Default <code>--first-name</code> First name of the superuser None <code>--last-name</code> Last name of the superuser None"},{"location":"reference/createsuperuser/#example-commands","title":"Example Commands","text":"<p>Basic usage: <pre><code>fastapi-admin createsuperuser admin@example.com password123\n</code></pre></p> <p>With name details: <pre><code>fastapi-admin createsuperuser admin@example.com password123 --first-name Admin --last-name User\n</code></pre></p>"},{"location":"reference/createsuperuser/#how-it-works","title":"How It Works","text":"<p>The <code>createsuperuser</code> command:</p> <ol> <li>Executes the <code>create_superuser.py</code> script inside your Docker container</li> <li>Creates a user with superuser status (<code>is_superuser=True</code>) and verified status (<code>is_verified=True</code>)</li> <li>If the user already exists, updates the user to have superuser privileges</li> </ol>"},{"location":"reference/createsuperuser/#admin-configuration-guide","title":"Admin Configuration Guide","text":"<p>To use the admin panel effectively with your custom models, you need to:</p>"},{"location":"reference/createsuperuser/#1-create-an-admin-view-class","title":"1. Create an Admin View Class","text":"<p>Each model you want to manage in the admin interface needs its own Admin View class:</p> <pre><code>from sqladmin import ModelView\nfrom .models import YourModel\nfrom app.core.main_admin import register_admin\n\n@register_admin\nclass YourModelAdmin(ModelView, model=YourModel):\n    \"\"\"Admin interface for YourModel.\"\"\"\n\n    name = \"YourModel\"\n    name_plural = \"YourModels\"\n    icon = \"fa-solid fa-list\"\n\n    column_list = [\n        YourModel.id,\n        # Your model fields here\n        YourModel.created_at\n    ]\n\n    column_searchable_list = [\n        # Fields for the search functionality\n    ]\n\n    column_sortable_list = [\n        # Fields that can be sorted\n    ]\n\n    can_create = True\n    can_edit = True\n    can_delete = True\n    can_view_details = True\n</code></pre>"},{"location":"reference/createsuperuser/#2-register-the-admin-view","title":"2. Register the Admin View","text":"<p>Update the <code>setup_admin</code> function in <code>app/core/main_admin.py</code> to import your admin module:</p> <pre><code>def setup_admin(app: FastAPI) -&gt; None:\n    # Import admin modules\n    try:\n        # Default authentication admin\n        import app.auth.admin\n\n        # Your application modules\n        import app.your_app.admin  # Import your admin module\n\n        # Register all views\n        for view in admin_views:\n            admin.add_view(view)\n            logger.info(f\"Registered admin view: {view.__name__}\")\n\n    except ImportError as e:\n        logger.warning(f\"Error importing admin module: {e}\")\n</code></pre>"},{"location":"reference/createsuperuser/#3-customize-admin-features","title":"3. Customize Admin Features","text":"<p>You can customize various aspects of your admin interface:</p> <ul> <li>Permissions: Control create, edit, delete, and view permissions</li> <li>Display Fields: Choose which fields appear in list views</li> <li>Search: Configure which fields are searchable</li> <li>Filtering: Add column filters for data filtering</li> <li>Formatting: Customize how data is displayed</li> </ul> <p>For example, to add custom filters and formatters:</p> <pre><code>@register_admin\nclass UserAdmin(ModelView, model=User):\n    # ...existing configuration...\n\n    column_formatters = {\n        User.created_at: lambda m, a: m.created_at.strftime(\"%Y-%m-%d %H:%M\")\n    }\n\n    column_filters = [\n        User.is_active,\n        User.is_superuser,\n        User.created_at\n    ]\n</code></pre>"},{"location":"reference/createsuperuser/#user-types","title":"User Types","text":"<p>The FastAPI Admin template includes several user permission levels:</p> User Type Description Access Regular User Basic application user API endpoints Active User User with confirmed active status API endpoints requiring active status Verified User User with verified email API endpoints requiring verification Superuser Administrator with full permissions All endpoints + Admin panel"},{"location":"reference/createsuperuser/#common-issues","title":"Common Issues","text":""},{"location":"reference/createsuperuser/#container-not-running","title":"Container Not Running","text":"<p>If you get a \"Container not running\" error, start your containers first:</p> <pre><code>fastapi-admin docker run\n</code></pre>"},{"location":"reference/createsuperuser/#environment-variables","title":"Environment Variables","text":"<p>If you get environment variable warnings, ensure you've created a <code>.env</code> file:</p> <pre><code>cp env.txt .env\n</code></pre>"},{"location":"reference/createsuperuser/#database-errors","title":"Database Errors","text":"<p>Database connection errors may occur if: - The database service isn't running - The database hasn't been initialized with migrations</p> <p>Run migrations before creating a superuser:</p> <pre><code>fastapi-admin db migrate\n</code></pre>"},{"location":"reference/createsuperuser/#admin-panel-access","title":"Admin Panel Access","text":"<p>Once you've created a superuser, you can access the admin panel at:</p> <pre><code>http://localhost:8000/admin\n</code></pre> <p>Log in with the email and password you provided to the createsuperuser command.</p>"},{"location":"reference/createsuperuser/#related-commands","title":"Related Commands","text":"<ul> <li>Docker Commands - Manage Docker containers</li> <li>DB Migrations - Database migration commands</li> </ul>"},{"location":"reference/db-migrations/","title":"Database Migration Commands","text":"<p>The Database migration commands provide an easy way to manage your database schema changes using Alembic.</p>"},{"location":"reference/db-migrations/#basic-usage","title":"Basic Usage","text":"<pre><code>fastapi-admin db makemigrations -m \"initial migration\"\nfastapi-admin db migrate\n</code></pre> <p>This will create and apply migrations to your database based on your SQLModel models.</p>"},{"location":"reference/db-migrations/#available-commands","title":"Available Commands","text":"Command Description <code>makemigrations</code> Create new database migrations <code>migrate</code> Apply pending database migrations <code>shell</code> Open a shell in the API container <code>env_check</code> Check for missing environment variables"},{"location":"reference/db-migrations/#command-details","title":"Command Details","text":""},{"location":"reference/db-migrations/#makemigrations","title":"Makemigrations","text":"<p>Creates new database migration files based on detected changes in your SQLModel models.</p> <pre><code>fastapi-admin db makemigrations -m \"message\"\n</code></pre> <p>Options:</p> Option Short Description <code>--message</code> <code>-m</code> Message describing the migration (default: \"init\") <p>This command will:</p> <ol> <li>Detect changes in your SQLModel models</li> <li>Generate migration files in the <code>migrations/versions</code> directory</li> <li>Each migration file contains upgrade and downgrade functions</li> </ol>"},{"location":"reference/db-migrations/#migrate","title":"Migrate","text":"<p>Applies all pending database migrations to bring your database schema up to date.</p> <pre><code>fastapi-admin db migrate\n</code></pre> <p>This command will:</p> <ol> <li>Run all pending migrations in sequence</li> <li>Apply schema changes to your database</li> <li>Update the Alembic version table to track applied migrations</li> </ol>"},{"location":"reference/db-migrations/#shell","title":"Shell","text":"<p>Opens a shell in the API Docker container for direct access to the environment.</p> <pre><code>fastapi-admin db shell\n</code></pre> <p>This shell allows you to:</p> <ol> <li>Run Python code with access to your models and environment</li> <li>Execute direct Alembic commands for advanced operations</li> <li>Access the database directly</li> </ol> <p>Example shell usage: <pre><code># Once in the shell\nalembic current      # Show current migration version\nalembic history      # Show migration history\nalembic downgrade -1 # Downgrade one version\n</code></pre></p>"},{"location":"reference/db-migrations/#how-it-works","title":"How It Works","text":"<p>The migration commands work through the following process:</p> <ol> <li>Model Detection:</li> <li>Migrations scan the models defined in <code>app/core/main_models.py</code></li> <li> <p>All imported SQLModel classes are detected for changes</p> </li> <li> <p>Migration Storage:</p> </li> <li>Migration files are stored in <code>migrations/versions/</code></li> <li> <p>Each migration is tracked with a unique revision ID</p> </li> <li> <p>Docker Integration:</p> </li> <li>Commands run through Docker Compose to ensure consistent environments</li> <li>Uses the API container defined in your docker-compose.yml</li> </ol>"},{"location":"reference/db-migrations/#common-issues","title":"Common Issues","text":"<ul> <li>Model Not Found: Ensure models are imported in <code>app/core/main_models.py</code></li> <li>Migration Conflicts: If multiple developers create migrations, merge them carefully</li> <li>Failed Migrations: Use the shell to downgrade to a previous version</li> <li>Empty Migrations: No changes detected in models since last migration</li> <li>Database Connection Issues: Check database URL in settings or environment variables</li> </ul>"},{"location":"reference/db-migrations/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with migration commands:</p> <ol> <li>Migration Creation Failed:</li> <li>Ensure all models are properly imported in main_models.py</li> <li>Check for syntax errors in your model definitions</li> <li> <p>Verify database connection settings</p> </li> <li> <p>Migration Application Failed:</p> </li> <li>Check the migration files for complex operations that might fail</li> <li>Look at database logs for specific SQL errors</li> <li> <p>Try running specific migrations directly in the shell</p> </li> <li> <p>No Changes Detected:</p> </li> <li>Confirm your model changes are in the right files</li> <li> <p>Make sure changes are significant (adding fields, changing types, etc.)</p> </li> <li> <p>Advanced Fixes:</p> </li> <li>Use the shell to run specific Alembic commands</li> <li>Check Alembic's current version with <code>alembic current</code></li> <li>Execute SQL directly if needed for complex situations</li> <li>Use <code>fastapi-admin shell</code> to access the container's environment</li> </ol>"},{"location":"reference/db-migrations/#best-practices","title":"Best Practices","text":"<ol> <li>Meaningful Messages: Use descriptive -m messages for each migration</li> <li>Regular Migrations: Create small, focused migrations rather than large changes</li> <li>Test Migrations: Always test migrations in development before production</li> <li>Version Control: Commit migration files to your version control system</li> <li>Database Backups: Always backup your database before applying migrations in production</li> </ol> <p>For more information on Alembic and SQLModel, refer to their official documentation.</p>"},{"location":"reference/docker/","title":"Docker Commands","text":"<p>The Docker commands provide an easy way to manage Docker containers for your FastAPI project.</p>"},{"location":"reference/docker/#basic-usage","title":"Basic Usage","text":"<pre><code>fastapi-admin docker build\nfastapi-admin docker run\n</code></pre> <p>This will build and start your Docker containers defined in your project's docker-compose.yml file.</p>"},{"location":"reference/docker/#available-commands","title":"Available Commands","text":"Command Description <code>build</code> Build Docker containers <code>run</code> Start Docker containers <code>down</code> Stop and remove Docker containers <code>cmd \"command\"</code> Run any Docker Compose command"},{"location":"reference/docker/#command-details","title":"Command Details","text":""},{"location":"reference/docker/#build","title":"Build","text":"<p>Builds the Docker containers defined in your project's docker-compose.yml file.</p> <pre><code>fastapi-admin docker build\n</code></pre> <p>This command will:</p> <ol> <li>Check if a <code>.env</code> file exists and create one from <code>env.txt</code> if needed</li> <li>Build all containers defined in <code>docker/compose/docker-compose.yml</code></li> </ol>"},{"location":"reference/docker/#run","title":"Run","text":"<p>Starts the Docker containers in detached mode.</p> <pre><code>fastapi-admin docker run\n</code></pre> <p>This command will:</p> <ol> <li>Start all containers defined in <code>docker/compose/docker-compose.yml</code></li> <li>Run in detached mode (<code>-d</code> flag)</li> <li>Set up necessary networking</li> </ol>"},{"location":"reference/docker/#down","title":"Down","text":"<p>Stops and removes running Docker containers.</p> <pre><code>fastapi-admin docker down\n</code></pre> <p>Options:</p> Option Short Description <code>--volumes</code> <code>-v</code> Also remove volumes <p>Example to remove containers and volumes: <pre><code>fastapi-admin docker down -v\n</code></pre></p>"},{"location":"reference/docker/#cmd","title":"Cmd","text":"<p>Runs any arbitrary docker-compose command.</p> <pre><code>fastapi-admin docker cmd \"COMMAND\"\n</code></pre> <p>Examples: <pre><code>fastapi-admin docker cmd \"ps\"\nfastapi-admin docker cmd \"logs api\"\nfastapi-admin docker cmd \"restart api\"\n</code></pre></p>"},{"location":"reference/docker/#integration-with-project","title":"Integration with Project","text":"<p>The Docker commands are designed to work with the project structure created by the <code>startproject</code> command. The commands expect:</p> <ol> <li>A <code>docker/compose/docker-compose.yml</code> file in your project</li> <li>A compatible Dockerfile that defines your API service</li> <li>PostgreSQL database service configuration</li> </ol>"},{"location":"reference/docker/#common-issues","title":"Common Issues","text":"<ul> <li>Docker not installed: Ensure Docker and docker-compose are installed and running</li> <li>Port conflicts: If ports are already in use, update the port mappings in your docker-compose.yml</li> <li>Permission issues: On Linux/Mac systems, you might need to run with sudo or add your user to the docker group</li> <li>Environment variables: If the container fails to start, check your <code>.env</code> file for missing required variables</li> <li>Resource limitations: Ensure Docker has sufficient CPU/memory allocated (especially on Docker Desktop)</li> </ul>"},{"location":"reference/docker/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with Docker commands:</p> <ol> <li>Check Docker logs: <code>fastapi-admin docker cmd \"logs\"</code></li> <li>Verify all containers are running: <code>fastapi-admin docker cmd \"ps\"</code></li> <li>Ensure your <code>.env</code> file has all required environment variables</li> <li>Try rebuilding the containers: <code>fastapi-admin docker build</code></li> <li>Check connectivity between containers with: <code>fastapi-admin docker cmd \"exec api ping postgres\"</code></li> </ol> <p>For more advanced Docker issues, refer to the Docker and docker-compose documentation.</p>"},{"location":"reference/startapp/","title":"Start App Command","text":"<p>The <code>startapp</code> command creates a new application module within your FastAPI project with a consistent structure.</p>"},{"location":"reference/startapp/#basic-usage","title":"Basic Usage","text":"<pre><code>fastapi-admin startapp blog\n</code></pre> <p>This command will create a new app module in your project's <code>app</code> directory.</p>"},{"location":"reference/startapp/#arguments","title":"Arguments","text":"Argument Description Required app_name Name of your app Yes"},{"location":"reference/startapp/#app-structure","title":"App Structure","text":"<pre><code>app/blog/\n\u251c\u2500\u2500 __init__.py          # Python package marker\n\u251c\u2500\u2500 admin.py             # Admin panel configuration\n\u251c\u2500\u2500 models.py            # SQLModel database models\n\u251c\u2500\u2500 routes.py            # FastAPI route definitions\n\u251c\u2500\u2500 schemas.py           # Pydantic data schemas\n\u2514\u2500\u2500 services.py          # Business logic and database operations\n</code></pre>"},{"location":"reference/startapp/#smart-app-generation","title":"Smart App Generation","text":"<p>The <code>startapp</code> command automatically:</p> <ul> <li>Creates the app with proper naming conventions</li> <li>Converts plural app names to singular model names when appropriate</li> <li>Sets up correctly formatted table names for database models</li> <li>Generates CRUD endpoints for your data model</li> <li>Creates Pydantic schemas for request/response validation</li> <li>Configures an admin interface for the model</li> </ul>"},{"location":"reference/startapp/#integration-with-main-app","title":"Integration with Main App","text":"<p>After creating your app, you need to complete several integration steps:</p>"},{"location":"reference/startapp/#1-register-the-router","title":"1. Register the Router","text":"<p>Add these lines to <code>app/core/main_routes.py</code>:</p> <pre><code>from app.blog.routes import router as blog_router\nmain_router.include_router(\n    blog_router,\n    prefix=f\"/api/{api_version}/blog\",\n    tags=[\"blog\"]\n)\n</code></pre>"},{"location":"reference/startapp/#2-import-the-model-for-migrations","title":"2. Import the Model for Migrations","text":"<p>For Alembic to detect your models, add an import to <code>app/core/main_models.py</code>:</p> <pre><code># Import your app-specific models here\nfrom app.blog.models import Post  # Import your new model\n</code></pre>"},{"location":"reference/startapp/#3-import-admin-configuration","title":"3. Import Admin Configuration","text":"<p>For the admin interface to recognize your model, update the <code>setup_admin</code> function in <code>app/core/main_admin.py</code>:</p> <pre><code>def setup_admin(app: FastAPI) -&gt; None:\n    # Import admin modules - update these imports based on your app structure\n    try:\n        # These will be dynamically imported based on your project structure\n        # Default authentication admin\n        import app.auth.admin\n\n        # Your application modules should be imported here\n        import app.blog.admin  # Import your new admin module\n\n        # Register all views to admin\n        for view in admin_views:\n            admin.add_view(view)\n            logger.info(f\"Registered admin view: {view.__name__}\")\n\n    except ImportError as e:\n        logger.warning(f\"Error importing admin module: {e}\")\n</code></pre> <p>Once your model is registered in the admin panel, you can create a superuser to access it:</p> <pre><code>fastapi-admin createsuperuser admin@example.com password123\n</code></pre> <p>See the Createsuperuser Command documentation for more details.</p>"},{"location":"reference/startapp/#4-access-your-api-endpoints","title":"4. Access your API endpoints","text":"<p> Your API will now have the following endpoints</p> <ul> <li><code>GET /api/v1/blog/</code> - List all blog posts</li> <li><code>GET /api/v1/blog/{item_id}</code> - Get a specific blog post</li> <li><code>POST /api/v1/blog/</code> - Create a new blog post</li> <li><code>PUT /api/v1/blog/{item_id}</code> - Update a blog post</li> <li><code>DELETE /api/v1/blog/{item_id}</code> - Delete a blog post</li> </ul>"},{"location":"reference/startapp/#5-access-the-admin-panel","title":"5. Access the admin panel","text":"<p>Your blog posts will be automatically available in the admin panel at <code>/admin</code>.</p>"},{"location":"reference/startapp/#common-issues","title":"Common Issues","text":"<ul> <li>App name validation: Use lowercase letters for app names; the CLI will handle proper case transformation</li> <li>Directory exists: Choose a different name or remove the existing directory</li> <li>Not in project root: Make sure to run the command from the project root directory</li> <li>Missing app directory: The CLI will create the app directory if it doesn't exist</li> </ul>"},{"location":"reference/startproject/","title":"Start Project Command","text":"<p>The <code>startproject</code> command creates a new FastAPI project with a modular structure.</p>"},{"location":"reference/startproject/#basic-usage","title":"Basic Usage","text":"<p><pre><code>fastapi-admin startproject myproject\n</code></pre> <pre><code>cd myproject\n</code></pre></p> <p>update .env</p> <p><pre><code>fastapi-admin docker build\n</code></pre> <pre><code>fastapi-admin docker run\n</code></pre></p>"},{"location":"reference/startproject/#arguments","title":"Arguments","text":"Argument Description Required project_name Name of your project Yes"},{"location":"reference/startproject/#project-structure","title":"Project Structure","text":"<pre><code>myproject/\n\u251c\u2500\u2500 .env                        # Environment variables configuration\n\u251c\u2500\u2500 alembic.ini                 # Alembic configuration for database migrations\n\u251c\u2500\u2500 env.txt                     # Example environment variables file\n\u251c\u2500\u2500 manage.py                   # CLI management script\n\u251c\u2500\u2500 pyproject.toml              # Project dependencies and configuration\n\u251c\u2500\u2500 README.md                   # Project documentation\n\u251c\u2500\u2500 uv.lock                     # Package lock file\n\u251c\u2500\u2500 app/                        # Main application package\n\u2502   \u251c\u2500\u2500 main.py                 # Application entry point\n\u2502   \u251c\u2500\u2500 auth/                   # Authentication module\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 admin.py            # Admin interface for auth models\n\u2502   \u2502   \u251c\u2500\u2500 auth.py             # Auth core functionality\n\u2502   \u2502   \u251c\u2500\u2500 email.py            # Email service for auth\n\u2502   \u2502   \u251c\u2500\u2500 models.py           # Auth data models\n\u2502   \u2502   \u251c\u2500\u2500 routes.py           # Auth API endpoints\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py          # Auth data schemas\n\u2502   \u2514\u2500\u2500 core/                   # Core application module\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 admin_auth.py       # Admin authentication\n\u2502       \u251c\u2500\u2500 db.py               # Database configuration\n\u2502       \u251c\u2500\u2500 main_admin.py       # Admin interface setup\n\u2502       \u251c\u2500\u2500 main_models.py      # Core data models\n\u2502       \u251c\u2500\u2500 main_routes.py      # Main API routes\n\u2502       \u251c\u2500\u2500 settings.py         # Application settings\n\u251c\u2500\u2500 docker/                     # Docker configuration\n\u2502   \u251c\u2500\u2500 Dockerfile              # Main Dockerfile\n\u2502   \u251c\u2500\u2500 compose/                # Docker Compose configurations\n\u2502   \u2502   \u251c\u2500\u2500 docker-compose.yml  # Development compose file\n\u2502   \u2502   \u2514\u2500\u2500 docker-compose.prod.yml # Production compose file\n\u2502   \u2514\u2500\u2500 traefik/                # Traefik reverse proxy configuration\n\u2502       \u2514\u2500\u2500 traefik.yml         # Traefik configuration\n\u251c\u2500\u2500 migrations/                 # Database migrations\n\u2502   \u251c\u2500\u2500 env.py                  # Alembic environment setup\n\u2502   \u251c\u2500\u2500 README                  # Migrations documentation\n\u2502   \u251c\u2500\u2500 script.py.mako          # Migration template    \n\u2502   \u2514\u2500\u2500 versions/               # Migration versions\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 scripts/                    # Utility scripts\n    \u2514\u2500\u2500 create_superuser.py     # Script to create admin users\n</code></pre>"},{"location":"reference/startproject/#common-issues","title":"Common Issues","text":"<ul> <li>Project name validation: Use lowercase letters, numbers, underscores</li> <li>Directory exists: Choose different name or remove existing directory</li> <li>Permission denied: Run from a directory where you have write access</li> </ul>"}]}